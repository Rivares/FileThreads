#include <sys/types.h>
#include <dirent.h>
#include <stdio.h>
#include <ctype.h>
#include <string>
#include <iostream>
#include <thread>
#include <fstream>
#include <vector>

using namespace std;


// Handler files:
void foo(int &Sum, std::string mass[], std::size_t i)
{
char buff[50] = {0};

// Cut and show path on screen:
for (int j = mass[i].length(); j != 0; --j)
{
    if ('/' == mass[i][j])
    {
        mass[i].copy(buff, (mass[i].length() - j), j);
        std::cout << buff << "\n";
        break;
    }
}

    // Make file's stream:
    std::ifstream fin(mass[i]);

    // Open file on read:
    if (!fin.is_open())
    {
        std::cout << "Not found file!\n";
    }
    else
    {
    //  Input from file
    fin.getline(buff, 50);
    std::cout << buff << "\n";

    //  Converting value buff:
    int t = std::stoi(buff, nullptr, 10);

    //  Suming value from files:
    Sum += t;
}

    fin.close();
}

int main()
{
    short i = 0; int Sum = 0;
    const char *Path = {"/home/rivares1853/Desktop/34/21"};
    string mass[50];

    // Make and open stream for working folder:
    DIR *dir = opendir(Path);

    // If folder exist, then monitoring contents
    if (dir)
    {
        struct dirent *entry;
        while ((entry = readdir(dir)) != NULL)
        {
            // Delete jump point
            if (*(entry -> d_name) == '.')
            {
                continue;
            }
            else
            {
                // Record value's file in massiv:
                mass[i++] = entry -> d_name;
                cout << "\n" << i << ": "<< entry -> d_name << entry -> d_type <<"\n";
            }
        }
    }
    else
    {
        // Overwise, sent "Error" in error stream:
        fprintf(stderr, "Error opening directory\n");
    }

    // Close folder:
    closedir(dir);

    cout << "-----------------------\n";

    // Pasting addreses for each file:
    std::string plusmass = "/home/rivares1853/Desktop/34/21/";
    std::string plus = plusmass;

    for (short j = 0; j < i; j++)
    {
        plus += mass[j];
        mass[j] = plus;
        std::cout << mass[j] << "\n";
        plus = plusmass;
    }

    // Make Thread Pool from <vector>:
    std::vector<std::thread> ths;
    std::size_t x;
    std::cout << "\nInput count threads: " << " ";
    std::cin >> x;
    for (std::size_t i = 0; i < x; ++i)
        ths.push_back(std::thread(&foo, std::ref(Sum), &mass[i], i));      // std::ref() - reference for modification value(Sum)

    // Wait end working all threads:
    for (auto & th : ths)
        th.join();

    // Sum:
    std::cout << "Sum = " << Sum << "\n";

    return 0;
}
